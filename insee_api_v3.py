"""
Module pour l'API INSEE Sirene V3
Utilise l'authentification par cl√©s API directement dans les headers
Bas√© sur la documentation officielle INSEE
"""

import os
import requests
import json
import time
from typing import Optional, Dict, Any, List
from dotenv import load_dotenv
import time
import urllib.parse

# Charger les variables d'environnement
load_dotenv()

class INSEEApiClient:
    """Client pour l'API INSEE Sirene V3"""
    
    def __init__(self):
        # L'API INSEE Sirene utilise une cl√© API sp√©cifique
        self.api_key = os.getenv('SIRENE_API_KEY')
        # URL de base correcte pour l'API Sirene 3.11
        self.base_url = 'https://api.insee.fr/api-sirene/3.11'
        
        if not self.api_key:
            raise ValueError("SIRENE_API_KEY doit √™tre d√©finie dans le fichier .env")
        
        print(f"‚úÖ Client INSEE initialis√©")
        print(f"   API Key: {self.api_key[:10]}...")
        print(f"   Base URL: {self.base_url}")
    
    def get_headers(self) -> Dict[str, str]:
        """Pr√©pare les headers d'authentification pour l'API INSEE"""
        return {
            'X-INSEE-Api-Key-Integration': self.api_key,
            'Accept': 'application/json',
            'User-Agent': 'Data-INSEE-Analysis/1.0'
        }
    
    def search_company_by_name(self, company_name: str, max_results: int = 10) -> Dict[str, Any]:
        """
        Recherche une entreprise par son nom dans l'API Sirene
        """
        headers = self.get_headers()
        
        # Nettoyer le nom de l'entreprise pour la recherche
        clean_name = company_name.strip().replace('"', '')
        
        # URL pour rechercher dans les unit√©s l√©gales
        url = f"{self.base_url}/siret"
        
        # Param√®tres de recherche
        params = {
            'q': f'denominationUniteLegale:"{clean_name}"',
            'nombre': max_results
        }
        
        try:
            print(f"üîç Recherche de: {company_name}")
            print(f"   URL: {url}")
            print(f"   Param√®tres: {params}")
            
            response = requests.get(url, headers=headers, params=params)
            
            print(f"üìä Code de r√©ponse: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                nb_etablissements = len(result.get('etablissements', []))
                print(f"‚úÖ {nb_etablissements} √©tablissement(s) trouv√©(s)")
                return result
            else:
                print(f"‚ùå Erreur HTTP {response.status_code}")
                print(f"   R√©ponse: {response.text[:300]}...")
                return {}
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erreur lors de la recherche de {company_name}: {e}")
            return {}
    
    def search_alternative_names(self, company_name: str) -> Dict[str, Any]:
        """
        Recherche avec des variantes du nom d'entreprise (optimis√© pour rate limit)
        """
        # Cr√©er les variations possibles
        variations = [company_name]
        
        # Ajouter variation en majuscules si diff√©rente
        upper_name = company_name.upper()
        if upper_name != company_name:
            variations.append(upper_name)
        
        # Ajouter premier mot si il y a des espaces
        if ' ' in company_name:
            first_word = company_name.split()[0]
            if first_word not in variations:
                variations.append(first_word)
        
        for i, variation in enumerate(variations):
            if variation != company_name:
                print(f"üîÑ Essai avec variation: {variation}")
            
            result = self.search_company_by_name(variation, max_results=5)
            if result and result.get('etablissements'):
                return result
                
            # Pause entre variations pour √©viter le rate limit
            if i < len(variations) - 1:
                print(f"   ‚è∏Ô∏è  Pause 2s entre variations...")
                time.sleep(2)
        
        print(f"‚ùå Aucun r√©sultat trouv√© pour {company_name} et ses variations")
        return {}
    
    def extract_company_info(self, search_result: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Extrait les informations principales d'une entreprise depuis les r√©sultats de recherche
        """
        try:
            if not search_result or 'etablissements' not in search_result:
                return None
            
            etablissements = search_result['etablissements']
            if not etablissements:
                return None
            
            # Prendre le premier √©tablissement (g√©n√©ralement le si√®ge)
            etablissement = etablissements[0]
            unite_legale = etablissement.get('uniteLegale', {})
            
            return {
                'siren': etablissement.get('siren'),
                'denomination': unite_legale.get('denominationUniteLegale'),
                'tranche_effectifs': unite_legale.get('trancheEffectifsUniteLegale'),
                'annee_effectifs': unite_legale.get('anneeEffectifsUniteLegale'),
                'categorie_entreprise': unite_legale.get('categorieEntreprise'),
                'date_creation': unite_legale.get('dateCreationUniteLegale'),
                'siret': etablissement.get('siret'),
                'nb_etablissements_total': len(etablissements),
                'activite_principale': unite_legale.get('activitePrincipaleUniteLegale'),
                'etat_administratif': unite_legale.get('etatAdministratifUniteLegale')
            }
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'extraction des infos: {e}")
            return None
    
    def get_effectif_description(self, tranche_code: str) -> str:
        """
        Convertit le code de tranche d'effectifs en description lisible
        Codes officiels INSEE 2025
        """
        if not tranche_code:
            return 'Non renseign√©'
            
        tranches = {
            'NN': 'Non renseign√©',
            '00': '0 salari√©',
            '01': '1 ou 2 salari√©s',
            '02': '3 √† 5 salari√©s',
            '03': '6 √† 9 salari√©s',
            '11': '10 √† 19 salari√©s',
            '12': '20 √† 49 salari√©s',
            '21': '50 √† 99 salari√©s',
            '22': '100 √† 199 salari√©s',
            '31': '200 √† 249 salari√©s',
            '32': '250 √† 499 salari√©s',
            '41': '500 √† 999 salari√©s',
            '42': '1000 √† 1999 salari√©s',
            '51': '2000 √† 4999 salari√©s',
            '52': '5000 √† 9999 salari√©s',
            '53': '10000 salari√©s et plus'
        }
        return tranches.get(str(tranche_code), f'Code inconnu: {tranche_code}')

# Test du module
if __name__ == "__main__":
    try:
        print("üöÄ Test du client INSEE API...")
        client = INSEEApiClient()
        
        # Test avec une entreprise connue
        print("\nüîç Test de recherche...")
        test_companies = ["ADECCO", "AIR FRANCE", "ALLIANZ"]
        
        for company in test_companies:
            print(f"\n--- Test avec {company} ---")
            result = client.search_company_by_name(company)
            
            if result:
                info = client.extract_company_info(result)
                if info:
                    print(f"‚úÖ Trouv√©: {info['denomination']}")
                    print(f"   SIREN: {info['siren']}")
                    print(f"   Effectifs: {client.get_effectif_description(info['tranche_effectifs'])}")
                    break  # Arr√™ter apr√®s le premier succ√®s
            else:
                print(f"‚ùå Pas de r√©sultat pour {company}")
                
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        import traceback
        traceback.print_exc()